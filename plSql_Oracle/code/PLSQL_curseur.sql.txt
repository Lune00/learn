----CURSEUR: permet de renvoyer plusieurs lignes d'un select dans un bloc PL/SQL
--
----Une premiere facon d'ouvrir/fermer le curseur avec une boucle FOR (usage simple)
--DECLARE
---- Déclaration du curseur : pointeur vers un bloc de lignes (retour du SELECT)
--CURSOR c_nom IS SELECT * FROM EMP;
--
--BEGIN
--    --Ouveture du curseur
--    --Parcours du contenu du curseur (ie les lignes/enregistrements)
--    --FETCH de chaque ligne
--    FOR i IN c_nom LOOP
--     DBMS_output.put_line(i.sal);
--    END LOOP;
--    --Fermeture du curseur
--END;
--/

--Une deuxieme facon avec une LOOP : plus de libertés

--DECLARE
--
--    CURSOR c_emp IS SELECT ename FROM emp;
--    v_nom emp.ename%type;
--BEGIN
--    --Ouverture du curseur:
--    OPEN c_emp;
--    --FETCH fonctionne comme un SELECT
--    FETCH c_emp INTO v_nom; 
--    --Ne renverra que la premiere ligne du curseur!
--    DBMS_output.put_line(v_nom);
--    --Fermeture du curseur (fermé obligatoirement à la fin du bloc (smart pointer like))
--    CLOSE c_emp;
--
--END;
--/

--Avec une LOOP: OPEN / LOOP / CLOSE
DECLARE
    CURSOR c_emp IS
    SELECT
        ename
    FROM
        emp;

    v_nom emp.ename%TYPE;
BEGIN
    --Ouverture du curseur:
    OPEN c_emp;
    LOOP
    --FETCH fonctionne comme un SELECT, le FETCH passe a la ligne suivante
    --a chaque fois qu'il en traite une. La taille du curseur est fixe.
        FETCH c_emp INTO v_nom;
    --Condition sur un attribut du curseur(found,notfound,isopen...)
    --monCurseur%nomAttribut
    --monCurseur%notfound: renvoie vrai si le dernier FETCH n'a renvoyé aucune ligne
        EXIT WHEN c_emp%notfound;
        dbms_output.put_line(v_nom);
    END LOOP;
    --Affiche le nombre de lignes du curseur;
    dbms_output.put_line(c_emp%rowcount);

    CLOSE c_emp;
END;
/

--Une deuxieme facon avec une LOOP : plus de libertés

--DECLARE
--
--    CURSOR c_emp IS SELECT ename FROM emp;
--    v_nom emp.ename%type;
--BEGIN
--    --Ouverture du curseur:
--    OPEN c_emp;
--    --FETCH fonctionne comme un SELECT
--    FETCH c_emp INTO v_nom; 
--    --Ne renverra que la premiere ligne du curseur!
--    DBMS_output.put_line(v_nom);
--    --Fermeture du curseur (fermé obligatoirement à la fin du bloc (smart pointer like))
--    CLOSE c_emp;
--
--END;
--/

----Avec une LOOP: OPEN / LOOP / CLOSE
--DECLARE
--    CURSOR c_emp IS
--    SELECT
--        ename
--    FROM
--        emp;
--
--    v_nom emp.ename%TYPE;
--BEGIN
--    --Ouverture du curseur:
--    OPEN c_emp;
--    LOOP
--    --FETCH fonctionne comme un SELECT, le FETCH passe a la ligne suivante
--    --a chaque fois qu'il en traite une. La taille du curseur est fixe.
--        FETCH c_emp INTO v_nom;
--    --Condition sur un attribut du curseur(found,notfound,isopen...)
--    --monCurseur%nomAttribut
--    --monCurseur%notfound: renvoie vrai si le dernier FETCH n'a renvoyé aucune ligne
--        EXIT WHEN c_emp%notfound;
--        dbms_output.put_line(v_nom);
--    END LOOP;
--    --Affiche le nombre de lignes du curseur;
--    dbms_output.put_line(c_emp%rowcount);
--
--    CLOSE c_emp;
--END;
--/


----Avec une LOOP: OPEN / LOOP / CLOSE
----cas du SELECT * avec rowtype
--DECLARE
--    CURSOR c_emp IS
--    SELECT
--        *
--    FROM
--        emp;
--
--    v_emp emp%rowtype;
--BEGIN
--    --Ouverture du curseur:
--    OPEN c_emp;
--    LOOP
--    --FETCH fonctionne comme un SELECT, le FETCH passe a la ligne suivante
--    --a chaque fois qu'il en traite une. La taille du curseur est fixe.
--        FETCH c_emp INTO v_emp;
--    --Condition sur un attribut du curseur(found,notfound,isopen...)
--    --monCurseur%nomAttribut
--    --monCurseur%notfound: renvoie vrai si le dernier FETCH n'a renvoyé aucune ligne
--        EXIT WHEN c_emp%notfound;
--        dbms_output.put_line(v_emp.ename||' '||v_emp.sal);
--    END LOOP;
--    --Affiche le nombre de lignes du curseur;
--    dbms_output.put_line(c_emp%rowcount);
--
--    CLOSE c_emp;
--END;
--/

--Liste des employés(nom) qui travaillent dans le meme departement que JONES

DECLARE

--Sous-requete
CURSOR c_emp IS SELECT ename FROM emp WHERE 
    deptno = (SELECT deptno FROM emp WHERE ename='JONES');

BEGIN

FOR i in c_emp LOOP
    IF i.ename <> 'JONES' THEN 
        DBMS_OUTPUT.put_line(i.ename);
    END IF;
END LOOP;

END;
/

--FOR method
DECLARE
CURSOR c_manager IS SELECT * FROM emp WHERE job='MANAGER';
BEGIN
FOR i in c_manager LOOP
    DBMS_OUTPUT.put_line(i.ename||i.sal);
    END LOOP;
END;
/

--LOOP metho (with FETCH of each record).
--lower(nomAttribut) : transforme les caracteres en minuscules. Plus
--besoin de savoir si la valeur du champ est en minuscule ou en majuscule
--note : function(Attribut) ne permet plus d'utiliser l'index s'il existe (baisse de perf)
--sauf si l'indexe est basé sur la dite fonction
DECLARE
CURSOR c_manager IS SELECT * FROM emp WHERE lower(job)='manager';
v_manager emp%rowtype;
BEGIN
OPEN c_manager;
LOOP
    FETCH c_manager INTO v_manager;
    EXIT WHEN c_manager%notfound;
    DBMS_OUTPUT.put_line(v_manager.ename||' '||v_manager.sal);   
END LOOP;
CLOSE c_manager;
END;

--Index sur la colonne job
CREATE INDEX il ON emp(job);
--Appel function: l'index ne pourra pas etre utilisé, obligé de parser le contenu
SELECT * FROM emp WHERE lower(job)='manager';
--Index basé sur la fonction : la requete se fera quand meme avec l'indexe
CREATE INDEX il2 ON emp(lower(job));
--Pourra a nouveau utilisé l'index (meilleur perfs)
SELECT * FROM emp WHERE lower(job)='manager';

--SELECT FOR UPDATE

DECLARE
    --On SELECT un ensemble de lignes pour update (pour les verouiller)
    --en rajoutant OF nomAttribut on précise ???? 
    CURSOR c_emp IS SELECT * FROM emp FOR UPDATE;

BEGIN
    FOR i in c_emp LOOP
        --CURRENT: precise la position du pointeur (ligne courrante)
        UPDATE emp set sal=sal*1.1 WHERE CURRENT of c_emp;
    END LOOP;
    COMMIT;
END;
/

SELECT * FROM emp FOR UPDATE;



--Passage de paramètre dans un curseur (en faire une fonction)

DECLARE
--On declare avec un argument (et son type)
CURSOR c_emp(v_num emp.deptno%type) IS SELECT * FROM emp WHERE deptno = v_num;
BEGIN
    FOR i in c_emp(20) LOOP
    DBMS_OUTPUT.PUT_LINE (i.ename);
    END LOOP;
END;
/